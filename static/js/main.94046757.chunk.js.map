{"version":3,"sources":["assets/virus.svg","layouts/MainLayout/MainLayout.jsx","contexts/SearchContext.jsx","pages/HomePage/components/Continent/Continent.jsx","components/SearchBar/SearchBar.jsx","components/BackToTopButton/BackToTopButton.jsx","RapidAPI.js","pages/HomePage/HomePage.jsx","pages/NotFoundPage/NotFoundPage.jsx","pages/CountryPage/CountryPage.jsx","pages/CustomErrorPage/CustomErrorPage.jsx","Routes.jsx","providers/SearchProvider.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","DefaultLayout","children","Navbar","bg","Brand","src","VirusesSVG","alt","width","height","className","Container","SearchContext","createContext","search","Continent","continent","countries","Consumer","Col","sm","md","lg","Card","Header","ListGroup","filter","country","toLowerCase","includes","toLocaleLowerCase","map","total","cases","population","time","Item","key","Row","to","Badge","variant","moment","format","SearchBar","withRouter","match","history","path","setSearch","InputGroup","Prepend","Text","id","icon","faSearch","FormControl","placeholder","aria-label","aria-describedby","onChange","text","push","handleOnChange","target","value","autoFocus","BackToTopButton","buttonRef","useRef","useEffect","window","addEventListener","current","scrollY","style","display","Button","ref","onClick","scroll","top","behavior","faArrowUp","fetchStatistics","undefined","Promise","resolve","reject","fetch","process","method","headers","then","response","json","data","errors","length","catch","reason","HomePage","useState","statistics","setStatistics","showSpinner","setShowsSpinner","continents","useMemo","stats","i","Object","prototype","hasOwnProperty","call","Spinner","animation","role","size","keys","NotFoundPage","fontSize","faSadTear","CountryPage","useParams","countryStats","setCountryStats","results","Breadcrumb","cursor","active","Body","Table","borderless","responsive","new","critical","recovered","deaths","tests","CustomErrorPage","faHeartBroken","Routes","exact","component","SearchContextProvider","Provider","App","MainLayout","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.94046757.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/virus.bf733151.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Navbar, Container } from 'react-bootstrap';\nimport VirusesSVG from '../../assets/virus.svg';\n\nconst DefaultLayout = ({ children }) => (\n  <>\n    <Navbar bg=\"light\">\n      <Navbar.Brand>\n        <img\n          src={VirusesSVG}\n          alt=\"\"\n          width=\"30\"\n          height=\"30\"\n          className=\"d-inline-block align-top\"\n        />\n        COVID-19 Statistics\n      </Navbar.Brand>\n    </Navbar>\n    <Container className=\"mt-3\">\n      {children}\n    </Container>\n  </>\n);\n\nDefaultLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default DefaultLayout;\n","import { createContext } from 'react';\n\nconst SearchContext = createContext({\n  search: '',\n});\n\nexport default SearchContext;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Col, Card, ListGroup, Badge, Row,\n} from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport SearchContext from '../../../../contexts/SearchContext';\n\nconst Continent = ({ continent, countries }) => (\n  <SearchContext.Consumer>\n    {\n        ({ search }) => (\n          <Col sm={12} md={6} lg={4} className=\"mb-3\">\n            <Card>\n              <Card.Header>{ continent }</Card.Header>\n              <ListGroup>\n                {\n                  countries && countries\n                    .filter(({ country }) => country.toLowerCase().includes((search || '').toLocaleLowerCase()))\n                    .map(({\n                      country, cases: { total }, population, time,\n                    }) => (\n                      <ListGroup.Item key={country}>\n                        <Row>\n                          <Col sm={12}><Link to={`country/${country}`}>{ country }</Link></Col>\n                          { population && (\n                          <Col sm={6}>\n                            <Badge variant=\"secondary\">\n                              {`Population: ${population}`}\n                            </Badge>\n                          </Col>\n                          )}\n                          { total && (\n                          <Col sm={6}>\n                            <Badge variant=\"warning\">\n                              {`Total cases: ${total}`}\n                            </Badge>\n                          </Col>\n                          )}\n                          { time && (\n                          <Col sm={12}>\n                            <Badge variant=\"info\">\n                              {`Last update: ${moment(time).format('MM/DD/YYYY HH:MM')}`}\n                            </Badge>\n                          </Col>\n                          )}\n                        </Row>\n                      </ListGroup.Item>\n                    ))\n                }\n              </ListGroup>\n            </Card>\n          </Col>\n        )\n      }\n  </SearchContext.Consumer>\n);\n\nContinent.propTypes = {\n  continent: PropTypes.string.isRequired,\n  countries: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Continent;\n","import React from 'react';\nimport { InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { withRouter } from 'react-router-dom';\nimport SearchContext from '../../contexts/SearchContext';\n\nconst SearchBar = withRouter(({ match, history }) => {\n  const { path } = match;\n\n  const handleOnChange = (text, setSearch) => {\n    setSearch(text);\n    if (path.includes('country')) history.push('/');\n  };\n\n  return (\n    <SearchContext.Consumer>\n      {\n        ({ search, setSearch }) => (\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"basic-addon1\"><FontAwesomeIcon icon={faSearch} /></InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder=\"Search by country name\"\n              aria-label=\"Search\"\n              aria-describedby=\"basic-addon1\"\n              onChange={({ target: { value } }) => handleOnChange(value, setSearch)}\n              autoFocus={search}\n              value={search}\n            />\n          </InputGroup>\n        )\n      }\n    </SearchContext.Consumer>\n  );\n});\n\nexport default SearchBar;\n","import React, { useRef, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport './BackToTopButton.styles.scss';\n\nconst BackToTopButton = () => {\n  const buttonRef = useRef();\n\n  useEffect(() => {\n    window.addEventListener('scroll', () => {\n      if (!buttonRef || !buttonRef.current) return;\n\n      if (window.scrollY > 300) {\n        buttonRef.current.style.display = 'block';\n      } else {\n        buttonRef.current.style.display = 'none';\n      }\n    });\n  }, [buttonRef]);\n\n  const backToTop = () => {\n    window.scroll({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  return (\n    <Button\n      className=\"back-to-top-button\"\n      variant=\"primary\"\n      ref={buttonRef}\n      onClick={() => backToTop()}\n    >\n      <FontAwesomeIcon icon={faArrowUp} />\n    </Button>\n  );\n};\n\nexport default BackToTopButton;\n","const fetchStatistics = (country = undefined) => new Promise((resolve, reject) => {\n  fetch(`https://${process.env.REACT_APP_RAPIDAPI_HOST}/statistics${country ? `?country=${country}` : ''}`, {\n    method: 'GET',\n    headers: {\n      'x-rapidapi-host': `${process.env.REACT_APP_RAPIDAPI_HOST}`,\n      'x-rapidapi-key': `${process.env.REACT_APP_REPIDAPI_KEY}`,\n    },\n  }).then((response) => {\n    response.json()\n      .then((data) => {\n        if (data.errors && data.errors.length) reject(data.errors);\n        else resolve(data);\n      })\n      .catch((reason) => reject(reason));\n  }).catch((reason) => reject(reason));\n});\n\nexport default fetchStatistics;\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { Row, Col, Spinner } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport Continent from './components/Continent/Continent';\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport BackToTopButton from '../../components/BackToTopButton/BackToTopButton';\nimport fetchStatistics from '../../RapidAPI';\n\nconst HomePage = withRouter(({ history }) => {\n  const [statistics, setStatistics] = useState([]);\n  const [showSpinner, setShowsSpinner] = useState(true);\n\n  useEffect(() => {\n    fetchStatistics()\n      .then(({ response }) => setStatistics(response))\n      .catch(() => history.push('/error'));\n  }, [history]);\n\n  const continents = useMemo(() => {\n    if (!statistics || statistics.length === 0) return {};\n\n    const map = {\n\n    };\n\n    let stats;\n    for (let i = 0; i < statistics.length; i += 1) {\n      stats = statistics[i];\n\n      if (Object.prototype.hasOwnProperty.call(map, stats.continent)) {\n        map[stats.continent].push(stats);\n      } else {\n        map[stats.continent] = [stats];\n      }\n    }\n    setShowsSpinner(false);\n    return map;\n  }, [statistics]);\n\n  return (\n    <Row>\n      <Col sm={12}><SearchBar /></Col>\n      <Col sm={12}>\n        <Row>\n          {\n            showSpinner ? (\n              <Col sm={12} className=\"text-center\">\n                <Spinner animation=\"border\" role=\"status\" size=\"lg\">\n                  <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n              </Col>\n            )\n              : continents && Object.keys(continents)\n                .map((continent) => (\n                  <Continent\n                    key={continent}\n                    continent={continent}\n                    countries={continents[continent]}\n                  />\n                ))\n        }\n        </Row>\n      </Col>\n      <BackToTopButton />\n    </Row>\n  );\n});\n\nexport default HomePage;\n","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSadTear } from '@fortawesome/free-solid-svg-icons';\n\nconst NotFoundPage = () => (\n  <Row>\n    <Col sm={12} className=\"text-center\">\n      <p style={{ fontSize: '40px' }}>\n        <FontAwesomeIcon icon={faSadTear} size=\"lg\" />\n        {' '}\n        Not Found.\n      </p>\n    </Col>\n  </Row>\n);\n\nexport default NotFoundPage;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, withRouter } from 'react-router-dom';\nimport {\n  Row, Col, Spinner, Card, Badge, Table, Breadcrumb,\n} from 'react-bootstrap';\nimport moment from 'moment';\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport fetchStatistics from '../../RapidAPI';\n\nconst CountryPage = withRouter(({ history }) => {\n  const { country } = useParams();\n  const [countryStats, setCountryStats] = useState({});\n  const [showSpinner, setShowsSpinner] = useState(true);\n\n  useEffect(() => {\n    fetchStatistics(country)\n      .then(({ response, results }) => {\n        if (results === 0) return history.push('/notfound');\n\n        setCountryStats(response[0]);\n        setShowsSpinner(false);\n        return {};\n      })\n      .catch(() => history.push('/error'));\n  }, [country, history]);\n\n  return (\n    <Row>\n      <Col sm={12}><SearchBar /></Col>\n      <Col sm={12}>\n        {\n          showSpinner ? (\n            <Col sm={12} className=\"text-center\">\n              <Spinner animation=\"border\" role=\"status\" size=\"lg\">\n                <span className=\"sr-only\">Loading...</span>\n              </Spinner>\n            </Col>\n          ) : (\n            <Row>\n              <Col sm={12}>\n                <Breadcrumb>\n                  <Breadcrumb.Item style={{ cursor: 'pointer' }} onClick={() => history.push('/')}>Home</Breadcrumb.Item>\n                  <Breadcrumb.Item active>\n                    {countryStats.continent}\n                  </Breadcrumb.Item>\n                  <Breadcrumb.Item active>{countryStats.country}</Breadcrumb.Item>\n                </Breadcrumb>\n              </Col>\n              <Col sm={12}>\n                <Card>\n                  <Card.Header>\n                    {countryStats.country}\n                    <Badge variant=\"info\" className=\"float-right\">{countryStats.continent}</Badge>\n                  </Card.Header>\n                  <Card.Body>\n                    <Table borderless responsive>\n                      <caption>Cases</caption>\n                      <thead>\n                        <tr>\n                          <th>New</th>\n                          <th>Active</th>\n                          <th>Critical</th>\n                          <th>Recovered</th>\n                          <th>Total</th>\n                          <th>1M pop</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>{countryStats.cases.new}</td>\n                          <td>{countryStats.cases.active}</td>\n                          <td>{countryStats.cases.critical}</td>\n                          <td>{countryStats.cases.recovered}</td>\n                          <td>{countryStats.cases['1M_pop']}</td>\n                          <td>{countryStats.cases.total}</td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                    <Table borderless responsive>\n                      <caption>Deaths</caption>\n                      <thead>\n                        <tr>\n                          <th>New</th>\n                          <th>1M pop</th>\n                          <th>Total</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>{countryStats.deaths.new}</td>\n                          <td>{countryStats.deaths['1M_pop']}</td>\n                          <td>{countryStats.deaths.total}</td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                    <Table borderless responsive>\n                      <caption>Tests</caption>\n                      <thead>\n                        <tr>\n                          <th>1M pop</th>\n                          <th>Total</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>{countryStats.tests['1M_pop']}</td>\n                          <td>{countryStats.tests.total}</td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                    <Row>\n                      <Col sm={12} md={6}>\n                        <p>\n                          Population:\n                          {' '}\n                          { countryStats.population }\n                        </p>\n                      </Col>\n                      <Col sm={12} md={6}>\n                        <p>\n                          Last update:\n                          {' '}\n                          { moment(countryStats.time).format('MM/DD/YYYY HH:MM') }\n                        </p>\n                      </Col>\n                    </Row>\n                  </Card.Body>\n                </Card>\n              </Col>\n            </Row>\n          )\n      }\n      </Col>\n    </Row>\n  );\n});\n\nexport default CountryPage;\n","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeartBroken } from '@fortawesome/free-solid-svg-icons';\n\nconst CustomErrorPage = () => (\n  <Row>\n    <Col sm={12} className=\"text-center\">\n      <p style={{ fontSize: '40px' }}>\n        <FontAwesomeIcon icon={faHeartBroken} size=\"lg\" />\n        {' '}\n        Something went wrong.\n      </p>\n    </Col>\n  </Row>\n);\n\nexport default CustomErrorPage;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport HomePage from './pages/HomePage/HomePage';\nimport NotFoundPage from './pages/NotFoundPage/NotFoundPage';\nimport CountryPage from './pages/CountryPage/CountryPage';\nimport CustomErrorPage from './pages/CustomErrorPage/CustomErrorPage';\n\nconst Routes = () => (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={HomePage} />\n      <Route path=\"/country/:country\" component={CountryPage} />\n      <Route path=\"/error\" component={CustomErrorPage} />\n      <Route path=\"/notfound\" component={NotFoundPage} />\n      <Route path=\"*\" component={NotFoundPage} />\n    </Switch>\n  </Router>\n);\n\nexport default Routes;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport SearchContext from '../contexts/SearchContext';\n\nconst SearchContextProvider = ({ children }) => {\n  const [search, setSearch] = useState('');\n\n  return (\n    <SearchContext.Provider value={{ search, setSearch: (text) => setSearch(text) }}>\n      {children}\n    </SearchContext.Provider>\n  );\n};\n\nSearchContextProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default SearchContextProvider;\n","import React from 'react';\nimport MainLayout from './layouts/MainLayout/MainLayout';\nimport Routes from './Routes';\nimport SearchContextProvider from './providers/SearchProvider';\n\nfunction App() {\n  return (\n    <SearchContextProvider>\n      <MainLayout>\n        <Routes />\n      </MainLayout>\n    </SearchContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}