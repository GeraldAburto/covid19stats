{"version":3,"sources":["assets/virus.svg","layouts/MainLayout/MainLayout.jsx","contexts/SearchContext.jsx","pages/HomePage/components/Continent/Continent.jsx","components/SearchBar/SearchBar.jsx","components/BackToTopButton/BackToTopButton.jsx","Covid19Service.js","pages/HomePage/HomePage.jsx","pages/NotFoundPage/NotFoundPage.jsx","pages/CountryPage/CountryPage.jsx","pages/CustomErrorPage/CustomErrorPage.jsx","Routes.jsx","providers/SearchProvider.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","DefaultLayout","children","Navbar","bg","Brand","src","VirusesSVG","alt","width","height","className","Container","SearchContext","createContext","search","Continent","continent","countries","Consumer","Col","sm","md","lg","Card","Header","ListGroup","filter","country","toLowerCase","includes","toLocaleLowerCase","map","total","cases","population","time","Item","key","Row","to","Badge","variant","moment","format","SearchBar","withRouter","match","history","path","setSearch","InputGroup","Prepend","Text","id","icon","faSearch","FormControl","placeholder","aria-label","aria-describedby","onChange","text","push","handleOnChange","target","value","autoFocus","BackToTopButton","buttonRef","useRef","useEffect","window","addEventListener","current","scrollY","style","display","Button","ref","onClick","scroll","top","behavior","faArrowUp","Covid19Service","undefined","Promise","resolve","reject","fetch","process","method","then","response","status","json","statusText","catch","reason","HomePage","useState","statistics","setStatistics","showSpinner","setShowsSpinner","searchContext","useContext","getStatistics","Spinner","animation","role","size","Object","keys","NotFoundPage","fontSize","faSadTear","CountryPage","useParams","countryStats","setCountryStats","getCountry","Breadcrumb","cursor","active","Body","Table","borderless","responsive","new","critical","recovered","deaths","tests","CustomErrorPage","faHeartBroken","Routes","exact","component","SearchContextProvider","Provider","App","MainLayout","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.fe1aa891.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/virus.bf733151.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Navbar, Container } from 'react-bootstrap';\r\nimport VirusesSVG from '../../assets/virus.svg';\r\n\r\nconst DefaultLayout = ({ children }) => (\r\n  <>\r\n    <Navbar bg=\"light\">\r\n      <Navbar.Brand>\r\n        <img\r\n          src={VirusesSVG}\r\n          alt=\"\"\r\n          width=\"30\"\r\n          height=\"30\"\r\n          className=\"d-inline-block align-top\"\r\n        />\r\n        COVID-19 Statistics\r\n      </Navbar.Brand>\r\n    </Navbar>\r\n    <Container className=\"mt-3\">\r\n      {children}\r\n    </Container>\r\n  </>\r\n);\r\n\r\nDefaultLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default DefaultLayout;\r\n","import { createContext } from 'react';\r\n\r\nconst SearchContext = createContext({\r\n  search: '',\r\n});\r\n\r\nexport default SearchContext;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Col, Card, ListGroup, Badge, Row,\r\n} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport SearchContext from '../../../../contexts/SearchContext';\r\n\r\nconst Continent = ({ continent, countries }) => (\r\n  <SearchContext.Consumer>\r\n    {\r\n        ({ search }) => (\r\n          <Col sm={12} md={6} lg={4} className=\"mb-3\">\r\n            <Card>\r\n              <Card.Header>{ continent }</Card.Header>\r\n              <ListGroup>\r\n                {\r\n                  countries && countries\r\n                    .filter(({ country }) => country.toLowerCase().includes((search || '').toLocaleLowerCase()))\r\n                    .map(({\r\n                      country, cases: { total }, population, time,\r\n                    }) => (\r\n                      <ListGroup.Item key={country}>\r\n                        <Row>\r\n                          <Col sm={12}><Link to={`country/${country}`}>{ country }</Link></Col>\r\n                          { population && (\r\n                          <Col sm={6}>\r\n                            <Badge variant=\"secondary\">\r\n                              {`Population: ${population}`}\r\n                            </Badge>\r\n                          </Col>\r\n                          )}\r\n                          { total && (\r\n                          <Col sm={6}>\r\n                            <Badge variant=\"warning\">\r\n                              {`Total cases: ${total}`}\r\n                            </Badge>\r\n                          </Col>\r\n                          )}\r\n                          { time && (\r\n                          <Col sm={12}>\r\n                            <Badge variant=\"info\">\r\n                              {`Last update: ${moment(time).format('MM/DD/YYYY HH:MM')}`}\r\n                            </Badge>\r\n                          </Col>\r\n                          )}\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    ))\r\n                }\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n        )\r\n      }\r\n  </SearchContext.Consumer>\r\n);\r\n\r\nContinent.propTypes = {\r\n  continent: PropTypes.string.isRequired,\r\n  countries: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n\r\nexport default Continent;\r\n","import React from 'react';\nimport { InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { withRouter } from 'react-router-dom';\nimport SearchContext from '../../contexts/SearchContext';\n\nconst SearchBar = withRouter(({ match, history }) => {\n  const { path } = match;\n\n  const handleOnChange = (text, setSearch) => {\n    setSearch(text);\n    if (path.includes('country')) history.push('/');\n  };\n\n  return (\n    <SearchContext.Consumer>\n      {\n        ({ search, setSearch }) => (\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"basic-addon1\"><FontAwesomeIcon icon={faSearch} /></InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder=\"Search by country name\"\n              aria-label=\"Search\"\n              aria-describedby=\"basic-addon1\"\n              onChange={({ target: { value } }) => handleOnChange(value, setSearch)}\n              autoFocus={search}\n              value={search}\n            />\n          </InputGroup>\n        )\n      }\n    </SearchContext.Consumer>\n  );\n});\n\nexport default SearchBar;\n","import React, { useRef, useEffect } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowUp } from '@fortawesome/free-solid-svg-icons';\r\nimport './BackToTopButton.styles.scss';\r\n\r\nconst BackToTopButton = () => {\r\n  const buttonRef = useRef();\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', () => {\r\n      if (!buttonRef || !buttonRef.current) return;\r\n\r\n      if (window.scrollY > 300) {\r\n        buttonRef.current.style.display = 'block';\r\n      } else {\r\n        buttonRef.current.style.display = 'none';\r\n      }\r\n    });\r\n  }, [buttonRef]);\r\n\r\n  const backToTop = () => {\r\n    window.scroll({\r\n      top: 0,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      className=\"back-to-top-button\"\r\n      variant=\"primary\"\r\n      ref={buttonRef}\r\n      onClick={() => backToTop()}\r\n    >\r\n      <FontAwesomeIcon icon={faArrowUp} />\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default BackToTopButton;\r\n","class Covid19Service {\n  static getStatistics(search = undefined) {\n    return new Promise((resolve, reject) => {\n      fetch(`${process.env.REACT_APP_API_HOST}/api/stats${search ? `?search=${search}` : ''}`, {\n        method: 'GET',\n      }).then((response) => {\n        if (response.status === 200) {\n          return response.json().then((json) => resolve(json));\n        } if (response.status === 404) {\n          return resolve(undefined);\n        }\n\n        return reject(response.statusText);\n      }).catch((reason) => reject(reason));\n    });\n  }\n\n  static getCountry(country) {\n    return new Promise((resolve, reject) => {\n      fetch(`${process.env.REACT_APP_API_HOST}/api/stats/country/${country}`, {\n        method: 'GET',\n      }).then((response) => {\n        if (response.status === 200) {\n          return response.json().then((json) => resolve(json));\n        } if (response.status === 404) {\n          return resolve(undefined);\n        }\n\n        return reject(response.statusText);\n      }).catch((reason) => reject(reason));\n    });\n  }\n}\n\nexport default Covid19Service;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Row, Col, Spinner } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport Continent from './components/Continent/Continent';\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport BackToTopButton from '../../components/BackToTopButton/BackToTopButton';\nimport Covid19Service from '../../Covid19Service';\nimport SearchContext from '../../contexts/SearchContext';\n\nconst HomePage = withRouter(({ history }) => {\n  const [statistics, setStatistics] = useState({});\n  const [showSpinner, setShowsSpinner] = useState(true);\n  const searchContext = useContext(SearchContext);\n\n  useEffect(() => {\n    Covid19Service.getStatistics(searchContext.search)\n      .then((response) => {\n        setStatistics(response);\n        setShowsSpinner(false);\n      })\n      .catch(() => history.push('/error'));\n  }, [searchContext.search, history]);\n\n  return (\n    <Row>\n      <Col sm={12}><SearchBar /></Col>\n      <Col sm={12}>\n        <Row>\n          {\n            showSpinner\n              && (\n              <Col sm={12} className=\"text-center\">\n                <Spinner animation=\"border\" role=\"status\" size=\"lg\">\n                  <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n              </Col>\n              )\n          }\n          {\n             statistics\n               ? (Object.keys(statistics)\n                 .map((continent) => (\n                   <Continent\n                     key={continent}\n                     continent={continent}\n                     countries={statistics[continent]}\n                   />\n                 ))) : <Col sm={12} className=\"text-center\"><h1>Such empty, try whit another country name.</h1></Col>\n          }\n        </Row>\n      </Col>\n      <BackToTopButton />\n    </Row>\n  );\n});\n\nexport default HomePage;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Row, Col, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSadTear } from '@fortawesome/free-solid-svg-icons';\n\nconst NotFoundPage = withRouter(({ history }) => (\n  <Row>\n    <Col sm={12} className=\"text-center\">\n      <p style={{ fontSize: '40px' }}>\n        <FontAwesomeIcon icon={faSadTear} size=\"lg\" />\n        {' '}\n        Not Found.\n      </p>\n    </Col>\n    <Col sm={12} className=\"text-center\">\n      <Button onClick={() => history.push('/')}>Back to home page</Button>\n    </Col>\n  </Row>\n));\n\nexport default NotFoundPage;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, withRouter } from 'react-router-dom';\nimport {\n  Row, Col, Spinner, Card, Badge, Table, Breadcrumb,\n} from 'react-bootstrap';\nimport moment from 'moment';\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport Covid19Service from '../../Covid19Service';\n\nconst CountryPage = withRouter(({ history }) => {\n  const { country } = useParams();\n  const [countryStats, setCountryStats] = useState({});\n  const [showSpinner, setShowsSpinner] = useState(true);\n\n  useEffect(() => {\n    Covid19Service.getCountry(country)\n      .then((response) => {\n        if (!response) return history.push('/notfound');\n\n        setCountryStats(response[0]);\n        setShowsSpinner(false);\n        return {};\n      })\n      .catch(() => history.push('/error'));\n  }, [country, history]);\n\n  return (\n    <Row>\n      <Col sm={12}><SearchBar /></Col>\n      <Col sm={12}>\n        {\n          showSpinner ? (\n            <Col sm={12} className=\"text-center\">\n              <Spinner animation=\"border\" role=\"status\" size=\"lg\">\n                <span className=\"sr-only\">Loading...</span>\n              </Spinner>\n            </Col>\n          ) : (\n            <Row>\n              <Col sm={12}>\n                <Breadcrumb>\n                  <Breadcrumb.Item style={{ cursor: 'pointer' }} onClick={() => history.push('/')}>Home</Breadcrumb.Item>\n                  <Breadcrumb.Item active>\n                    {countryStats.continent}\n                  </Breadcrumb.Item>\n                  <Breadcrumb.Item active>{countryStats.country}</Breadcrumb.Item>\n                </Breadcrumb>\n              </Col>\n              <Col sm={12}>\n                <Card>\n                  <Card.Header>\n                    {countryStats.country}\n                    <Badge variant=\"info\" className=\"float-right\">{countryStats.continent}</Badge>\n                  </Card.Header>\n                  <Card.Body>\n                    <div className=\"border-bottom\">\n                      <Table borderless responsive>\n                        <caption>Cases</caption>\n                        <thead>\n                          <tr>\n                            <th>New</th>\n                            <th>Active</th>\n                            <th>Critical</th>\n                            <th>Recovered</th>\n                            <th>Total</th>\n                            <th>1M pop</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr>\n                            <td>{countryStats.cases.new}</td>\n                            <td>{countryStats.cases.active}</td>\n                            <td>{countryStats.cases.critical}</td>\n                            <td>{countryStats.cases.recovered}</td>\n                            <td>{countryStats.cases['1M_pop']}</td>\n                            <td>{countryStats.cases.total}</td>\n                          </tr>\n                        </tbody>\n                      </Table>\n                    </div>\n                    <div className=\"border-bottom\">\n                      <Table borderless responsive>\n                        <caption>Deaths</caption>\n                        <thead>\n                          <tr>\n                            <th>New</th>\n                            <th>1M pop</th>\n                            <th>Total</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr>\n                            <td>{countryStats.deaths.new}</td>\n                            <td>{countryStats.deaths['1M_pop']}</td>\n                            <td>{countryStats.deaths.total}</td>\n                          </tr>\n                        </tbody>\n                      </Table>\n                    </div>\n                    <div className=\"border-bottom\" />\n                    <Table borderless responsive>\n                      <caption>Tests</caption>\n                      <thead>\n                        <tr>\n                          <th>1M pop</th>\n                          <th>Total</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>{countryStats.tests['1M_pop']}</td>\n                          <td>{countryStats.tests.total}</td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                    <div className=\"border-bottom\" />\n                    <Row>\n                      <Col sm={12} md={6}>\n                        <p>\n                          Population:\n                          {' '}\n                          { countryStats.population }\n                        </p>\n                      </Col>\n                      <Col sm={12} md={6}>\n                        <p>\n                          Last update:\n                          {' '}\n                          { moment(countryStats.time).format('MM/DD/YYYY HH:MM') }\n                        </p>\n                      </Col>\n                    </Row>\n                  </Card.Body>\n                </Card>\n              </Col>\n            </Row>\n          )\n      }\n      </Col>\n    </Row>\n  );\n});\n\nexport default CountryPage;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Row, Col, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeartBroken } from '@fortawesome/free-solid-svg-icons';\n\nconst CustomErrorPage = withRouter(({ history }) => (\n  <Row>\n    <Col sm={12} className=\"text-center\">\n      <p style={{ fontSize: '40px' }}>\n        <FontAwesomeIcon icon={faHeartBroken} size=\"lg\" />\n        {' '}\n        Something went wrong.\n      </p>\n    </Col>\n    <Col sm={12} className=\"text-center\">\n      <Button onClick={() => history.push('/')}>Back to home page</Button>\n    </Col>\n  </Row>\n));\n\nexport default CustomErrorPage;\n","import React from 'react';\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport HomePage from './pages/HomePage/HomePage';\r\nimport NotFoundPage from './pages/NotFoundPage/NotFoundPage';\r\nimport CountryPage from './pages/CountryPage/CountryPage';\r\nimport CustomErrorPage from './pages/CustomErrorPage/CustomErrorPage';\r\n\r\nconst Routes = () => (\r\n  <Router>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={HomePage} />\r\n      <Route path=\"/country/:country\" component={CountryPage} />\r\n      <Route path=\"/error\" component={CustomErrorPage} />\r\n      <Route path=\"/notfound\" component={NotFoundPage} />\r\n      <Route path=\"*\" component={NotFoundPage} />\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SearchContext from '../contexts/SearchContext';\r\n\r\nconst SearchContextProvider = ({ children }) => {\r\n  const [search, setSearch] = useState('');\r\n\r\n  return (\r\n    <SearchContext.Provider value={{ search, setSearch: (text) => setSearch(text) }}>\r\n      {children}\r\n    </SearchContext.Provider>\r\n  );\r\n};\r\n\r\nSearchContextProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default SearchContextProvider;\r\n","import React from 'react';\r\nimport MainLayout from './layouts/MainLayout/MainLayout';\r\nimport Routes from './Routes';\r\nimport SearchContextProvider from './providers/SearchProvider';\r\n\r\nfunction App() {\r\n  return (\r\n    <SearchContextProvider>\r\n      <MainLayout>\r\n        <Routes />\r\n      </MainLayout>\r\n    </SearchContextProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}